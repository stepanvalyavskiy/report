@article{paxos-commit,
  author = {Gray, Jim and Lamport, Leslie},
  title = {Consensus on Transaction Commit},
  year = {2006},
  issue_date = {March 2006},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {31},
  number = {1},
  issn = {0362-5915},
  url = {https://doi.org/10.1145/1132863.1132867},
  doi = {10.1145/1132863.1132867},
  abstract = {The distributed transaction commit problem requires reaching agreement on whether a transaction is committed or aborted. The classic Two-Phase Commit protocol blocks if the coordinator fails. Fault-tolerant consensus algorithms also reach agreement, but do not block whenever any majority of the processes are working. The Paxos Commit algorithm runs a Paxos consensus algorithm on the commit/abort decision of each participant to obtain a transaction commit protocol that uses 2F + 1 coordinators and makes progress if at least F + 1 of them are working properly. Paxos Commit has the same stable-storage write delay, and can be implemented to have the same message delay in the fault-free case as Two-Phase Commit, but it uses more messages. The classic Two-Phase Commit algorithm is obtained as the special F = 0 case of the Paxos Commit algorithm.},
  journal = {ACM Trans. Database Syst.},
  month = mar,
  pages = {133–160},
  numpages = {28},
  keywords = {Consensus, Paxos, two-phase commit}
}

@patent{content-addressable-storage,
  title="Content-addressable data storage",
  number="US009830345B1",
  author="Arthur Baars, Oxford (GB)",
  assignee="Semmle Limited, Oxford (GB)",
  day="28",
  month="November",
  year="2017"
}

@article{flp,
  author={Michael J. Fischer, Nancy A. Lynch, and Michael S. Paterson.},
  title={Impossibility of distributed consensus with one faulty process},
  journal={Journal of the ACM, 32(2):374–382},
  year={1985},
  month={April},
  url={https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf}
}

@Article{byzantine-generals,
author = {Lamport, Leslie and Shostak, Robert and Pease, Marshall},
title = {The Byzantine Generals Problem},
year = {1982},
month = {July},
abstract = {I have long felt that, because it was posed as a cute problem about philosophers seated around a table, Dijkstra's dining philosopher's problem received much more attention than it deserves. (For example, it has probably received more attention in the theory community than the readers/writers problem, which illustrates the same principles and has much more practical importance.) I believed that the problem introduced in [41] was very important and deserved the attention of computer scientists. The popularity of the dining philosophers problem taught me that the best way to attract attention to a problem is to present it in terms of a story.

There is a problem in distributed computing that is sometimes called the Chinese Generals Problem, in which two generals have to come to a common agreement on whether to attack or retreat, but can communicate only by sending messengers who might never arrive. I stole the idea of the generals and posed the problem in terms of a group of generals, some of whom may be traitors, who have to reach a common decision. I wanted to assign the generals a nationality that would not offend any readers. At the time, Albania was a completely closed society, and I felt it unlikely that there would be any Albanians around to object, so the original title of this paper was The Albanian Generals Problem. Jack Goldberg was smart enough to realize that there were Albanians in the world outside Albania, and Albania might not always be a black hole, so he suggested that I find another name. The obviously more appropriate Byzantine generals then occurred to me.

The main reason for writing this paper was to assign the new name to the problem. But a new paper needed new results as well. I came up with a simpler way to describe the general 3n+1-processor algorithm. (Shostak's 4-processor algorithm was subtle but easy to understand; Pease's generalization was a remarkable tour de force.) We also added a generalization to networks that were not completely connected. (I don't remember whose work that was.) I also added some discussion of practical implementation details.},
url = {https://www.microsoft.com/en-us/research/publication/byzantine-generals-problem/},
pages = {382-401},
journal = {ACM Transactions on Programming Languages and Systems},
}
